services:
  db:
    image: postgres:14
    container_name: db
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5532:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 20s
      timeout: 20s
      retries: 5
      start_period: 5s
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
      - ../scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    networks:
      - net

  pgadmin:
    image: elestio/pgadmin:latest
    container_name: pgadmin
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5533:8080"
    volumes:
      - pgadmin_data:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@anclaev.ru
      PGADMIN_DEFAULT_PASSWORD: admin228
      PGADMIN_LISTEN_PORT: 8080
    networks:
      - net
  
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    restart: unless-stopped
    ports:
      - '5592:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - net
  
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    environment:
      REDIS_USER: ${REDIS_USER}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USER_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "5579:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      start_period: 5s
    volumes:
      - redis_data:/data
      - ../scripts/init-redis.sh:/init/redis-init.sh
    entrypoint: /init/redis-init.sh
    tty: true
    networks:
      - net
 
  minio:
    image: minio/minio:RELEASE.2025-02-07T23-21-09Z
    restart: unless-stopped
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_TOKEN}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_TOKEN}
    volumes:
      - minio_data:/mnt/data
    command: minio server /mnt/data --address :9000 --console-address :9001
    ports:
      - "5500:9000"
      - "5501:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      start_period: 5s
    networks:
      - net

networks:
  net:
    driver: bridge

volumes:
  db_data:
  pgadmin_data:
  minio_data:
  redis_data:
    